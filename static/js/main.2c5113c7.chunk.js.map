{"version":3,"sources":["reducers/ContactosReducer.js","components/FormularioAdd.jsx","components/TablaContactos.jsx","components/Contactos.jsx","components/Footer.jsx","components/Header.jsx","App.js","serviceWorkerRegistration.js","index.js"],"names":["ContactosReducer","state","action","type","payload","filter","actual","id","FormularioAdd","dispatch","useState","nombre","numero","data","setData","handleChange","e","target","name","value","actionAdd","uuid","className","onChange","autoComplete","onClick","TablaContactos","contactos","map","contacto","finalId","split","init","localStorage","getItem","JSON","parse","Contactos","useReducer","useEffect","setItem","stringify","formView","setFormView","Footer","Date","getFullYear","Header","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2c5113c7.chunk.js","sourcesContent":["export const ContactosReducer = (state=[], action) => {\r\n    switch (action.type) {\r\n        case \"add\":\r\n            return [...state, action.payload]\r\n        \r\n        case \"delete\":\r\n            return state.filter(actual => actual.id !== action.payload)\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst FormularioAdd = ({ dispatch }) => {\r\n\r\n    const [data, setData] = useState({ nombre: \"\", numero: \"\" })\r\n\r\n    const { nombre , numero } = data\r\n    \r\n    const handleChange = (e) => {\r\n        setData({\r\n            ...data,\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    const actionAdd = {\r\n        type: \"add\",\r\n        payload: {\r\n            id: uuid(),\r\n            nombre,\r\n            numero\r\n        }\r\n    } \r\n    const handleAdd = () => {\r\n        dispatch(actionAdd)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <label className=\"mx-1 d-grid gap-2\">\r\n                    Nombre:{\" \"}\r\n                    <input onChange={handleChange} name=\"nombre\" value={nombre} type=\"text\" className=\"form-control\" autoComplete=\"off\" />\r\n                </label>\r\n                <label className=\"mx-1 d-grid gap-2\">\r\n                    Numero:{\" \"}\r\n                    <input onChange={handleChange} name=\"numero\" value={numero}  type=\"text\" className=\"form-control\" autoComplete=\"off\" />\r\n                </label>\r\n                <div className=\"mx-1 d-grid gap-2\">\r\n                    <button onClick={handleAdd} className=\"btn btn-info mt-2\">Agregar</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormularioAdd\r\n","import React from 'react'\r\n\r\nconst TablaContactos = ({ contactos = [], dispatch = [] }) => {\r\n    \r\n    const handleDelete = (id) => {\r\n        const deleteAction = {\r\n            type: \"delete\",\r\n            payload: id\r\n        }\r\n\r\n        dispatch(deleteAction)\r\n    }\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Nombre</th>\r\n                    <th>Número</th>\r\n                    \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    contactos.map((contacto) => {\r\n\r\n                        const finalId= contacto.id.split(\"-\")\r\n\r\n                        return <tr key={contacto.id}>\r\n                            <th>{finalId[0]}</th>\r\n                            <td>{ contacto.nombre }</td>\r\n                            <td>{contacto.numero}</td>\r\n                            <td>\r\n                                <button onClick={()=>handleDelete(contacto.id)} className=\"btn btn-danger\">Eliminar</button>\r\n                            </td>\r\n                        </tr>\r\n                     })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default TablaContactos\r\n","import React, { useEffect, useReducer, useState } from 'react'\r\nimport { ContactosReducer } from '../reducers/ContactosReducer'\r\nimport FormularioAdd from './FormularioAdd'\r\nimport TablaContactos from './TablaContactos'\r\n\r\nconst init = () => {\r\n    const contactos = localStorage.getItem(\"contactos\")\r\n    \r\n    return contactos ? JSON.parse(contactos) : [] \r\n}\r\n\r\n\r\nconst Contactos = () => {\r\n    const [state, dispatch] = useReducer(ContactosReducer, [], init)\r\n    \r\n    useEffect(() => {\r\n        localStorage.setItem(\"contactos\", JSON.stringify(state))\r\n    }, [state])\r\n    \r\n    const [formView, setFormView] = useState(false)\r\n\r\n    return (\r\n        <div className=\"container mt-3\">\r\n            <button onClick={() => setFormView(!formView)} className=\"btn btn-success\">\r\n                {formView ? \"- Cerrar\" : \"+ Agregar Contacto\"}\r\n            </button>\r\n            {formView && <FormularioAdd dispatch={dispatch} />}\r\n\r\n            <TablaContactos contactos={state} dispatch={dispatch}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contactos\r\n\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark text-center\">\r\n            <div className=\"container-fluid\">\r\n                <p className=\"navbar-brand h1\">\r\n                {\" \"}\r\n                    Carlos Camacho Ángel - &copy; {new Date().getFullYear()}{\" \"}\r\n                </p>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <h1 className=\"navbar-brand\">Agenda React Reducer</h1>\r\n            </div>\r\n       </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\nimport Contactos from './components/Contactos'\nimport Footer from './components/Footer'\nimport Header from './components/Header'\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Contactos/>\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n"],"sourceRoot":""}